// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typebox {
  provider = "prisma-typebox-generator"
  output   = "./generated/schema"
}

enum CredentialsType {
  PASSWORD
  PASSKEY
}

/// A user in the system
model User {
  id                    String             @id @default(uuid())
  email                 String             @unique
  name                  String
  conferenceMemberships ConferenceMember[]
  committeeMemberships  CommitteeMember[]

  // === credentials ===
  type CredentialsType

  // === password ===
  passwordHash String?

  // === passkey ===
  passkeyCredentialID         String?
  passkeyCredentialPublicKey  String?
  passkeyCredentialCounter    Int?
  passkeyCredentialDeviceType String?
  passkeyCredentialBackedUp   Boolean?

  // === email validation ===
  emailValidated             Boolean   @default(false)
  emailValidationTokenHash   String?
  emailValidationTokenExpiry DateTime?
}

/// Consumeable token which grants the creation of a conference
model ConferenceCreateToken {
  token String @id
}

/// A conference in the system
model Conference {
  id          String             @id @default(uuid())
  name        String             @unique
  committees  Committee[]
  start       DateTime?
  end         DateTime?
  delegations Delegation[]
  members     ConferenceMember[]
}

/// The role of a user in a conference
enum ConferenceRole {
  ADMIN
  SECRETARIAT
  CHAIR
  COMMITTEE_ADVISOR
  NON_STATE_ACTOR
  PRESS_CORPS
  GUEST
  PARTICIPANT_CARE
  MISCELLANEOUS_TEAM
}

/// A user's membership in a conference, providing them with a role in the conference
model ConferenceMember {
  id              String         @id @default(uuid())
  conference      Conference     @relation(fields: [conferenceId], references: [id])
  conferenceId    String
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  role            ConferenceRole
  nonStateActor   NonStateActor? @relation(fields: [nonStateActorId], references: [id])
  nonStateActorId String?

  @@unique([userId, conferenceId])
}

/// The type of a committee in a conference
enum CommitteeCategory {
  /// A standard committee
  COMMITTEE
  /// A crisis simulation
  CRISIS
  /// A International Court of Justice simulation
  ICJ
}

enum CommitteeStatus {
  FORMAL
  INFORMAL
  PAUSE
  SUSPENSION
  CLOSED /// Don't display a Widget
}

/// A committee in a conference
model Committee {
  id                String            @id @default(uuid())
  name              String
  abbreviation      String
  category          CommitteeCategory
  conference        Conference        @relation(fields: [conferenceId], references: [id])
  conferenceId      String
  members           CommitteeMember[]
  parent            Committee?        @relation("subCommittee", fields: [parentId], references: [id])
  parentId          String?
  subCommittees     Committee[]       @relation("subCommittee")
  agendaItems       AgendaItem[]
  whiteboardContent String            @default("<h1>Hello, World</h1>")
  status            CommitteeStatus   @default(CLOSED)
  statusHeadline    String?
  statusUntil       DateTime?

  @@unique([name, conferenceId])
  @@unique([abbreviation, conferenceId])
}

/// The role of a user in a committee
enum CommitteeRole {
  DELEGATE
  OBSERVER
}

/// The presence status of a CommitteeMember
enum Presence {
  PRESENT
  EXCUSED
  ABSENT
}

/// A user's membership in a committee, providing them with a role in the committee
model CommitteeMember {
  id            String         @id @default(uuid())
  committee     Committee      @relation(fields: [committeeId], references: [id])
  committeeId   String
  user          User?          @relation(fields: [userId], references: [id])
  userId        String?
  speakersLists SpeakersList[]
  delegation    Delegation?    @relation(fields: [delegationId], references: [id])
  delegationId  String?
  presence      Presence       @default(ABSENT)

  @@unique([committeeId, delegationId])
  @@unique([committeeId, userId])
}

/// An agenda item in a committee. This is a topic of discussion in a committee.
model AgendaItem {
  id           String         @id @default(uuid())
  committee    Committee      @relation(fields: [committeeId], references: [id])
  committeeId  String
  title        String
  description  String?
  speakerLists SpeakersList[]
  isActive     Boolean        @default(false)
}

/// The type of a speakers list
enum SpeakersListCategory {
  /// A standard speakers list
  SPEAKERS_LIST
  /// A comment list
  COMMENT_LIST
  /// A moderated caucus
  MODERATED_CAUCUS
}

/// A speakers list in a committee
model SpeakersList {
  id           String               @id @default(uuid())
  agendaItem   AgendaItem           @relation(fields: [agendaItemId], references: [id])
  agendaItemId String
  type         SpeakersListCategory
  speakers     CommitteeMember[]
  /// The time in seconds that a speaker has to speak
  speakingTime Int
  timestamp    DateTime?
  isPaused     Boolean              @default(true)
  isClosed     Boolean              @default(false)

  @@unique([agendaItemId, type])
}

//TODO should we allow for customizing these per conference and just allow loading template at creation?
/// A nation in the system. E.g. Germany
model Nation {
  id          String       @id @default(uuid())
  alpha3Code  String       @unique
  delegations Delegation[]
}

/// A non-state actor in the system. E.g. the Red Cross
model NonStateActor {
  id               String             @id @default(uuid())
  code             String             @unique
  ConferenceMember ConferenceMember[]
}

model SpecialPerson {
  id   String @id @default(uuid())
  code String @unique
}

model Delegation {
  id           String            @id @default(uuid())
  conference   Conference        @relation(fields: [conferenceId], references: [id])
  conferenceId String
  nation       Nation            @relation(fields: [nationId], references: [id])
  nationId     String
  members      CommitteeMember[]
}
